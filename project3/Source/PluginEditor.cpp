/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"

//==============================================================================
NewProjectAudioProcessorEditor::NewProjectAudioProcessorEditor (NewProjectAudioProcessor* ownerFilter)
    : AudioProcessorEditor (ownerFilter),

      innerLevelLabel ("", "Inner Level:"),
      outerLevelLabel ("", "Outer Level:"),
      removeNumLabel("", "Frames to Remove:"),
      keepNumLabel ("", "Frames to Keep:"),
      removeAmountLabel ("", "Removal Intensity"),
      noiseCutoffLabel ("", "noise cutoff:"),
      noiseAmountLabel ("", "noise amount:"),

      innerLevelSlider ("innerLevel"),
	  outerLevelSlider ("outerLevel"),
	  removeNumSlider ("removeNum"),
	  keepNumSlider ("keepNum"),
	  removeAmountSlider ("removeAmount"),
	  noiseCutoffSlider ("noiseCutoff"),
	  noiseAmountSlider ("noiseAmount")
{
    // add some sliders..
    addAndMakeVisible (innerLevelSlider);
    innerLevelSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    innerLevelSlider.addListener (this);
    innerLevelSlider.setRange (0.0, 1.0, 0.01);

	addAndMakeVisible (outerLevelSlider);
    outerLevelSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    outerLevelSlider.addListener (this);
    outerLevelSlider.setRange (0.0, 1.0, 0.01);

	addAndMakeVisible (removeNumSlider);
    removeNumSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    removeNumSlider.addListener (this);
    removeNumSlider.setRange (0.0, 1.0, 0.01);

	addAndMakeVisible (keepNumSlider);
	keepNumSlider.setSliderStyle (Slider::RotaryVerticalDrag);
	keepNumSlider.addListener (this);
	keepNumSlider.setRange (0.0, 1.0, 0.001);

	addAndMakeVisible (removeAmountSlider);
    removeAmountSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    removeAmountSlider.addListener (this);
    removeAmountSlider.setRange (0.0, 1.0, 0.001);

	addAndMakeVisible (noiseCutoffSlider);
    noiseCutoffSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    noiseCutoffSlider.addListener (this);
    noiseCutoffSlider.setRange (0.0, 1.0, 0.01);

	addAndMakeVisible (noiseAmountSlider);
    noiseAmountSlider.setSliderStyle (Slider::RotaryVerticalDrag);
    noiseAmountSlider.addListener (this);
    noiseAmountSlider.setRange (0.0, 1.0, 0.01);

    // add some labels for the sliders..
    innerLevelLabel.attachToComponent (&innerLevelSlider, false);
    innerLevelLabel.setFont (Font (11.0f));

    outerLevelLabel.attachToComponent (&outerLevelSlider, false);
    outerLevelLabel.setFont (Font (11.0f));

	removeNumLabel.attachToComponent (&removeNumSlider, false);
    removeNumLabel.setFont (Font (11.0f));

	keepNumLabel.attachToComponent (&keepNumSlider, false);
    keepNumLabel.setFont (Font (11.0f));

	removeAmountLabel.attachToComponent (&removeAmountSlider, false);
    removeAmountLabel.setFont (Font (11.0f));

	noiseCutoffLabel.attachToComponent (&noiseCutoffSlider, false);
    noiseCutoffLabel.setFont (Font (11.0f));

	noiseAmountLabel.attachToComponent (&noiseAmountSlider, false);
    noiseAmountLabel.setFont (Font (11.0f));






   

    // add the triangular resizer component for the bottom-right of the UI
    addAndMakeVisible (resizer = new ResizableCornerComponent (this, &resizeLimits));
    resizeLimits.setSizeLimits (150, 150, 800, 300);

    // set our component's initial size to be the last one that was stored in the filter's settings
    setSize (ownerFilter->lastUIWidth,
             ownerFilter->lastUIHeight);

    startTimer (50);
}

NewProjectAudioProcessorEditor::~NewProjectAudioProcessorEditor()
{
}

//==============================================================================
void NewProjectAudioProcessorEditor::paint (Graphics& g)
{
    g.setGradientFill (ColourGradient (Colours::white, 0, 0,
                                       Colours::grey, 0, (float) getHeight(), false));
    g.fillAll();
}

void NewProjectAudioProcessorEditor::resized()
{
    innerLevelSlider.setBounds (20, 60, 150, 20);
    outerLevelSlider.setBounds (20, 100, 150, 20);
    removeNumSlider.setBounds (20, 140, 150, 20);
    keepNumSlider.setBounds (20, 180, 150, 20);
    removeAmountSlider.setBounds (170, 60, 150, 20);
    noiseCutoffSlider.setBounds (170, 100, 150, 20);
    noiseAmountSlider.setBounds (170, 140, 150, 20);


    const int keyboardHeight = 70;

    resizer->setBounds (getWidth() - 16, getHeight() - 16, 16, 16);

    getProcessor()->lastUIWidth = getWidth();
    getProcessor()->lastUIHeight = getHeight();
}

//==============================================================================
// This timer periodically checks whether any of the filter's parameters have changed...
void NewProjectAudioProcessorEditor::timerCallback()
{
    NewProjectAudioProcessor* ourProcessor = getProcessor();

    innerLevelSlider.setValue (ourProcessor->innerLevel, dontSendNotification);
    outerLevelSlider.setValue (ourProcessor->outerLevel, dontSendNotification);
    removeNumSlider.setValue (ourProcessor->removeNum, dontSendNotification);
    keepNumSlider.setValue (ourProcessor->keepNum, dontSendNotification);
    removeAmountSlider.setValue (ourProcessor->removeAmount, dontSendNotification);
    noiseCutoffSlider.setValue (ourProcessor->noiseCutoff, dontSendNotification);
    noiseAmountSlider.setValue (ourProcessor->noiseAmount, dontSendNotification);
}

// This is our Slider::Listener callback, when the user drags a slider.
void NewProjectAudioProcessorEditor::sliderValueChanged (Slider* slider)
{
    if (slider == &innerLevelSlider)
    {
        // It's vital to use setParameterNotifyingHost to change any parameters that are automatable
        // by the host, rather than just modifying them directly, otherwise the host won't know
        // that they've changed.
        getProcessor()->setParameterNotifyingHost (NewProjectAudioProcessor::innerLevelParam,
                                                   (float) innerLevelSlider.getValue());
    }
    else if (slider == &outerLevelSlider)
    {
        getProcessor()->setParameterNotifyingHost (NewProjectAudioProcessor::outerLevelParam,
                                                   (float) outerLevelSlider.getValue());
    }
 else if (slider == &removeNumSlider)
    {
        getProcessor()->setParameterNotifyingHost (NewProjectAudioProcessor::remove,
                                                   (float) removeNumSlider.getValue());
    }
 else if (slider == &keepNumSlider)
    {
        getProcessor()->setParameterNotifyingHost (NewProjectAudioProcessor::keep,
                                                   (float) keepNumSlider.getValue());
    }
 else if (slider == &removeAmountSlider)
    {
        getProcessor()->setParameterNotifyingHost (NewProjectAudioProcessor::removeAmt,
                                                   (float) removeAmountSlider.getValue());
    }
 else if (slider == &noiseCutoffSlider)
    {
        getProcessor()->setParameterNotifyingHost (NewProjectAudioProcessor::noisecutoff,
                                                   (float) noiseCutoffSlider.getValue());
    }
 else if (slider == &noiseAmountSlider)
    {
        getProcessor()->setParameterNotifyingHost (NewProjectAudioProcessor::noiseamount,
                                                   (float) noiseAmountSlider.getValue());
    }
}

//==============================================================================
// quick-and-dirty function to format a timecode string
static const String timeToTimecodeString (const double seconds)
{
    const double absSecs = fabs (seconds);

    const int hours =  (int) (absSecs / (60.0 * 60.0));
    const int mins  = ((int) (absSecs / 60.0)) % 60;
    const int secs  = ((int) absSecs) % 60;

    String s (seconds < 0 ? "-" : "");

    s << String (hours).paddedLeft ('0', 2) << ":"
      << String (mins) .paddedLeft ('0', 2) << ":"
      << String (secs) .paddedLeft ('0', 2) << ":"
      << String (roundToInt (absSecs * 1000) % 1000).paddedLeft ('0', 3);

    return s;
}

// quick-and-dirty function to format a bars/beats string
static const String ppqToBarsBeatsString (double ppq, double /*lastBarPPQ*/, int numerator, int denominator)
{
    if (numerator == 0 || denominator == 0)
        return "1|1|0";

    const int ppqPerBar = (numerator * 4 / denominator);
    const double beats  = (fmod (ppq, ppqPerBar) / ppqPerBar) * numerator;

    const int bar    = ((int) ppq) / ppqPerBar + 1;
    const int beat   = ((int) beats) + 1;
    const int ticks  = ((int) (fmod (beats, 1.0) * 960.0 + 0.5));

    String s;
    s << bar << '|' << beat << '|' << ticks;
    return s;
}

// Updates the text in our position label.
void NewProjectAudioProcessorEditor::displayPositionInfo (const AudioPlayHead::CurrentPositionInfo& pos)
{

}
